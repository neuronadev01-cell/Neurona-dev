name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning and dependency checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Linting and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci || echo "Backend dependencies not found"

      - name: Run ESLint
        run: |
          cd frontend && npm run lint
          cd ../backend && npm run lint || echo "Backend linting not configured"

      - name: Run Prettier check
        run: |
          cd frontend && npm run format:check || echo "Format check not configured"

      - name: TypeScript check
        run: |
          cd frontend && npm run type-check || npx tsc --noEmit
          cd ../backend && npm run type-check || npx tsc --noEmit || echo "Backend TS check not configured"

  # Frontend tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend tests
        run: cd frontend && npm run test:ci

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: frontend/coverage/

  # Backend tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: neurona_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci || echo "Backend not configured"

      - name: Run backend tests
        run: cd backend && npm run test:ci || echo "Backend tests not configured"
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/neurona_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/coverage/ || echo "No backend coverage"

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security, test-frontend, test-backend]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: neurona_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: neurona_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration || echo "Integration tests not configured"
        env:
          DATABASE_URL: postgresql://neurona_user:test_password@localhost:5432/neurona_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # Deploy to staging (on staging branch or main branch PRs)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    environment:
      name: staging
      url: https://staging.neurona.health
    steps:
      - name: Deploy to Google Cloud Run (Staging)
        run: |
          echo "Deploying to staging environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://neurona.health
    steps:
      - name: Deploy to Google Cloud Run (Production)
        run: |
          echo "Deploying to production environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment commands here

  # Post-deployment health checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Health check staging
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "Running health check for staging"
          curl -f https://staging.neurona.health/api/health || exit 1

      - name: Health check production
        if: needs.deploy-production.result == 'success'
        run: |
          echo "Running health check for production"
          curl -f https://neurona.health/api/health || exit 1

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [security, lint, test-frontend, test-backend, build, integration-test, deploy-staging, deploy-production]
    if: always() && (needs.security.result == 'failure' || needs.lint.result == 'failure' || needs.test-frontend.result == 'failure' || needs.test-backend.result == 'failure' || needs.build.result == 'failure' || needs.integration-test.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    steps:
      - name: Notify team of failure
        run: |
          echo "Pipeline failed. Notification would be sent to team."
          # Add notification logic here (Slack, email, etc.)
# Cloud Build configuration for Neurona Mental Health Platform
# This file defines the CI/CD pipeline for Google Cloud

steps:
  # Step 1: Run tests
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci
        cd frontend && npm ci
        cd ../backend && npm ci
        cd ..
        
        echo "Running frontend tests..."
        cd frontend && npm run test:ci
        cd ..
        
        echo "Running backend tests..."
        cd backend && npm run test:ci || echo "Backend tests not configured"
        cd ..
        
        echo "Running linting..."
        cd frontend && npm run lint
        cd ../backend && npm run lint || echo "Backend linting not configured"
        cd ..
    id: 'run-tests'

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/neurona:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/neurona:latest'
      - '.'
    id: 'build-image'
    waitFor: ['run-tests']

  # Step 3: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/neurona:$COMMIT_SHA'
    id: 'push-image-sha'
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/neurona:latest'
    id: 'push-image-latest'
    waitFor: ['build-image']

  # Step 4: Run database migrations (only on main branch)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Running database migrations..."
          gcloud sql connect neurona-db-production --user=neurona_user --database=neurona --quiet << 'EOF'
          # Add your migration commands here
          # Example: \i /path/to/migration.sql
          EOF
        else
          echo "Skipping migrations for branch: $BRANCH_NAME"
        fi
    id: 'run-migrations'
    waitFor: ['push-image-sha']

  # Step 5: Deploy to Cloud Run (staging)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'neurona-staging'
      - '--image'
      - 'gcr.io/$PROJECT_ID/neurona:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-env-vars'
      - 'NODE_ENV=staging'
      - '--quiet'
    id: 'deploy-staging'
    waitFor: ['run-migrations']

  # Step 6: Deploy to Cloud Run (production) - only on main branch
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Deploying to production..."
          gcloud run deploy neurona-production \
            --image gcr.io/$PROJECT_ID/neurona:$COMMIT_SHA \
            --region ${_REGION} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars NODE_ENV=production \
            --quiet
        else
          echo "Skipping production deployment for branch: $BRANCH_NAME"
        fi
    id: 'deploy-production'
    waitFor: ['deploy-staging']

  # Step 7: Run health checks
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running health checks..."
        
        # Get staging URL
        STAGING_URL=$(gcloud run services describe neurona-staging --region=${_REGION} --format='value(status.url)')
        echo "Staging URL: $STAGING_URL"
        
        # Health check staging
        curl -f "$STAGING_URL/api/health" || exit 1
        echo "Staging health check passed"
        
        if [ "$BRANCH_NAME" = "main" ]; then
          # Get production URL
          PRODUCTION_URL=$(gcloud run services describe neurona-production --region=${_REGION} --format='value(status.url)')
          echo "Production URL: $PRODUCTION_URL"
          
          # Health check production
          curl -f "$PRODUCTION_URL/api/health" || exit 1
          echo "Production health check passed"
        fi
    id: 'health-checks'
    waitFor: ['deploy-production']

  # Step 8: Run security scan (optional)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'beta'
      - 'container'
      - 'images'
      - 'scan'
      - 'gcr.io/$PROJECT_ID/neurona:$COMMIT_SHA'
      - '--quiet'
    id: 'security-scan'
    waitFor: ['push-image-sha']

# Substitutions for build variables
substitutions:
  _REGION: us-central1
  _SERVICE_NAME: neurona

# Build options
options:
  # Use high-CPU machine for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Set timeout to 20 minutes
  timeout: '1200s'
  
  # Enable logging
  logging: CLOUD_LOGGING_ONLY
  
  # Set disk size
  diskSizeGb: 20
  
  # Use Docker layer caching
  dynamic_substitutions: true

# Build triggers (configured in Cloud Build console)
# Repository: https://github.com/neuronadev01-cell/Neurona-dev
# - Push to main branch: full deployment pipeline
# - Push to feature branches: build and test only
# - Pull requests: build, test, and deploy to preview environment

# Available logs
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/database-password/versions/latest
      env: 'DATABASE_PASSWORD'
    - versionName: projects/$PROJECT_ID/secrets/jwt-secret/versions/latest
      env: 'JWT_SECRET'
    - versionName: projects/$PROJECT_ID/secrets/resend-api-key/versions/latest
      env: 'RESEND_API_KEY'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-build-artifacts'
    paths: 
      - 'build-logs/*'
      - 'test-results/*'